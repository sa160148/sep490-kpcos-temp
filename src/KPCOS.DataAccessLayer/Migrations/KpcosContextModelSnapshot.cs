// <auto-generated />
using System;
using KPCOS.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KPCOS.DataAccessLayer.Migrations
{
    [DbContext(typeof(KpcosContext))]
    partial class KpcosContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly?>("Actdate")
                        .HasColumnType("date")
                        .HasColumnName("actdate");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly>("Estdate")
                        .HasColumnType("date")
                        .HasColumnName("estdate");

                    b.Property<Guid?>("Idparent")
                        .HasColumnType("uuid")
                        .HasColumnName("idparent");

                    b.Property<Guid>("Idproject")
                        .HasColumnType("uuid")
                        .HasColumnName("idproject");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("construction_item_pkey");

                    b.HasIndex(new[] { "Idparent" }, "construction_item_idparent_index");

                    b.HasIndex(new[] { "Idproject" }, "construction_item_idproject_index");

                    b.HasIndex(new[] { "Name" }, "construction_item_name_index");

                    b.HasIndex(new[] { "Status" }, "construction_item_status_index");

                    b.ToTable("construction_item", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("Idconstructionitem")
                        .HasColumnType("uuid")
                        .HasColumnName("idconstructionitem");

                    b.Property<Guid?>("Idstaff")
                        .HasColumnType("uuid")
                        .HasColumnName("idstaff");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("construction_task_pkey");

                    b.HasIndex(new[] { "Idconstructionitem" }, "construction_task_idconstructionitem_index");

                    b.HasIndex(new[] { "Idstaff" }, "construction_task_idstaff_index");

                    b.HasIndex(new[] { "Name" }, "construction_task_name_index");

                    b.HasIndex(new[] { "Status" }, "construction_task_status_index");

                    b.ToTable("construction_task", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("construction_template_pkey");

                    b.HasIndex(new[] { "Name" }, "construction_template_name_index");

                    b.HasIndex(new[] { "Status" }, "construction_template_status_index");

                    b.ToTable("construction_template", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionTemplateItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("Idparent")
                        .HasColumnType("uuid")
                        .HasColumnName("idparent");

                    b.Property<Guid>("Idtemplate")
                        .HasColumnType("uuid")
                        .HasColumnName("idtemplate");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("construction_template_item_pkey");

                    b.HasIndex("Idtemplate");

                    b.HasIndex(new[] { "Idparent" }, "construction_template_item_idparent_index");

                    b.HasIndex(new[] { "Name" }, "construction_template_item_name_index");

                    b.HasIndex(new[] { "Status" }, "construction_template_item_status_index");

                    b.ToTable("construction_template_item", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionTemplateTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("Idtemplateitem")
                        .HasColumnType("uuid")
                        .HasColumnName("idtemplateitem");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("construction_template_task_pkey");

                    b.HasIndex(new[] { "Idtemplateitem" }, "construction_template_task_idtemplateitem_index");

                    b.HasIndex(new[] { "Name" }, "construction_template_task_name_index");

                    b.HasIndex(new[] { "Status" }, "construction_template_task_status_index");

                    b.ToTable("construction_template_task", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("ContractValue")
                        .HasColumnType("integer")
                        .HasColumnName("contract_value");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("customer_name");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("QuotationId")
                        .HasColumnType("uuid")
                        .HasColumnName("quotation_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("contract_pkey");

                    b.HasIndex(new[] { "ProjectId" }, "contract_project_id_index");

                    b.HasIndex(new[] { "QuotationId" }, "contract_quotation_id_index");

                    b.HasIndex(new[] { "Status" }, "contract_status_index");

                    b.ToTable("contract", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly>("Dob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("dob")
                        .HasDefaultValueSql("'2000-01-01'::date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("gender");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int?>("Point")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("point");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("customer_pkey");

                    b.HasIndex(new[] { "UserId" }, "customer_user_id_index");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Design", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_public");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("design_pkey");

                    b.HasIndex(new[] { "ProjectId" }, "design_project_id_index");

                    b.HasIndex(new[] { "StaffId" }, "design_staff_id_index");

                    b.HasIndex(new[] { "Status" }, "design_status_index");

                    b.HasIndex(new[] { "Version" }, "design_version_index");

                    b.ToTable("design", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.DesignImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DesignId")
                        .HasColumnType("uuid")
                        .HasColumnName("design_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("design_image_pkey");

                    b.HasIndex(new[] { "DesignId" }, "design_image_design_id_index");

                    b.ToTable("design_image", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Doc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("docs_pkey");

                    b.HasIndex(new[] { "Name" }, "docs_name_index");

                    b.HasIndex(new[] { "ProjectId" }, "docs_project_id_index");

                    b.HasIndex(new[] { "Type" }, "docs_type_index");

                    b.ToTable("docs", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("equipment_pkey");

                    b.HasIndex(new[] { "Name" }, "equipment_name_index");

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.MaintenanceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("maintenance_item_pkey");

                    b.HasIndex(new[] { "Name" }, "maintenance_item_name_index");

                    b.ToTable("maintenance_item", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.MaintenancePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("PricePerUnit")
                        .HasColumnType("integer")
                        .HasColumnName("price_per_unit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("maintenance_package_pkey");

                    b.HasIndex(new[] { "Name" }, "maintenance_package_name_index");

                    b.HasIndex(new[] { "Status" }, "maintenance_package_status_index");

                    b.ToTable("maintenance_package", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.MaintenancePackageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid>("MaintenanceItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_item_id");

                    b.Property<Guid>("MaintenancePackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_package_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("maintenance_package_item_pkey");

                    b.HasIndex("MaintenanceItemId");

                    b.HasIndex("MaintenancePackageId");

                    b.ToTable("maintenance_package_item", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.MaintenanceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid>("MaintenancePackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_package_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("maintenance_request_pkey");

                    b.HasIndex(new[] { "CustomerId" }, "maintenance_request_customer_id_index");

                    b.HasIndex(new[] { "MaintenancePackageId" }, "maintenance_request_maintenance_package_id_index");

                    b.HasIndex(new[] { "Status" }, "maintenance_request_status_index");

                    b.ToTable("maintenance_request", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.MaintenanceRequestTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MaintenanceRequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_request_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("maintenance_request_task_pkey");

                    b.HasIndex(new[] { "MaintenanceRequestId" }, "maintenance_request_task_maintenance_request_id_index");

                    b.HasIndex(new[] { "Name" }, "maintenance_request_task_name_index");

                    b.HasIndex(new[] { "StaffId" }, "maintenance_request_task_staff_id_index");

                    b.HasIndex(new[] { "Status" }, "maintenance_request_task_status_index");

                    b.ToTable("maintenance_request_task", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("package_pkey");

                    b.HasIndex(new[] { "Name" }, "package_name_index");

                    b.HasIndex(new[] { "Status" }, "package_status_index");

                    b.ToTable("package", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.PackageDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_id");

                    b.Property<Guid>("PackageItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_item_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("package_detail_pkey");

                    b.HasIndex(new[] { "PackageId" }, "package_detail_package_id_index");

                    b.HasIndex(new[] { "PackageItemId" }, "package_detail_package_item_id_index");

                    b.ToTable("package_detail", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.PackageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("package_item_pkey");

                    b.HasIndex(new[] { "Name" }, "package_item_name_index");

                    b.ToTable("package_item", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.PaymentBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_paid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<int>("TotalValue")
                        .HasColumnType("integer")
                        .HasColumnName("total_value");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("payment_batch_pkey");

                    b.HasIndex(new[] { "ContractId" }, "payment_batch_contract_id_index");

                    b.HasIndex(new[] { "Status" }, "payment_batch_status_index");

                    b.ToTable("payment_batch", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<double>("Area")
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("customer_name");

                    b.Property<double>("Depth")
                        .HasColumnType("double precision")
                        .HasColumnName("depth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<Guid?>("Templatedesignid")
                        .HasColumnType("uuid")
                        .HasColumnName("templatedesignid");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("project_pkey");

                    b.HasIndex("PackageId");

                    b.HasIndex(new[] { "Address" }, "project_address_index");

                    b.HasIndex(new[] { "CustomerId" }, "project_customer_id_index");

                    b.HasIndex(new[] { "CustomerName" }, "project_customer_name_index");

                    b.HasIndex(new[] { "Email" }, "project_email_index");

                    b.HasIndex(new[] { "Name" }, "project_name_index");

                    b.HasIndex(new[] { "Phone" }, "project_phone_index");

                    b.HasIndex(new[] { "Status" }, "project_status_index");

                    b.ToTable("project", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ProjectStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("project_staff_pkey");

                    b.HasIndex(new[] { "ProjectId" }, "project_staff_project_id_index");

                    b.HasIndex(new[] { "StaffId" }, "project_staff_staff_id_index");

                    b.ToTable("project_staff", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Discount")
                        .HasColumnType("integer")
                        .HasColumnName("discount");

                    b.Property<DateTime>("Exptime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exptime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("Starttime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starttime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("promotion_pkey");

                    b.HasIndex(new[] { "Code" }, "promotion_code_index");

                    b.HasIndex(new[] { "Name" }, "promotion_name_index");

                    b.HasIndex(new[] { "Status" }, "promotion_status_index");

                    b.ToTable("promotion", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("Idtemplate")
                        .HasColumnType("uuid")
                        .HasColumnName("idtemplate");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("quotation_pkey");

                    b.HasIndex("Idtemplate");

                    b.HasIndex("PromotionId");

                    b.HasIndex(new[] { "ProjectId" }, "quotation_project_id_index");

                    b.HasIndex(new[] { "Status" }, "quotation_status_index");

                    b.HasIndex(new[] { "Version" }, "quotation_version_index");

                    b.ToTable("quotation", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.QuotationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("QuotationId")
                        .HasColumnType("uuid")
                        .HasColumnName("quotation_id");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("quotation_detail_pkey");

                    b.HasIndex(new[] { "QuotationId" }, "quotation_detail_quotation_id_index");

                    b.HasIndex(new[] { "ServiceId" }, "quotation_detail_service_id_index");

                    b.ToTable("quotation_detail", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.QuotationEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("equipment_id");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("QuotationId")
                        .HasColumnType("uuid")
                        .HasColumnName("quotation_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("quotation_equipment_pkey");

                    b.HasIndex(new[] { "EquipmentId" }, "quotation_equipment_equipment_id_index");

                    b.HasIndex(new[] { "QuotationId" }, "quotation_equipment_quotation_id_index");

                    b.ToTable("quotation_equipment", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("service_pkey");

                    b.HasIndex(new[] { "Name" }, "service_name_index");

                    b.HasIndex(new[] { "Status" }, "service_status_index");

                    b.ToTable("service", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("position");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("staff_pkey");

                    b.HasIndex(new[] { "UserId" }, "staff_user_id_index");

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid?>("IdDocs")
                        .HasColumnType("uuid")
                        .HasColumnName("id_docs");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid>("No")
                        .HasColumnType("uuid")
                        .HasColumnName("no");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("transaction_pkey");

                    b.HasIndex("IdDocs");

                    b.HasIndex(new[] { "CustomerId" }, "transaction_customer_id_index");

                    b.HasIndex(new[] { "No" }, "transaction_no_index");

                    b.HasIndex(new[] { "Status" }, "transaction_status_index");

                    b.HasIndex(new[] { "Type" }, "transaction_type_index");

                    b.ToTable("transaction", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Avatar")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar")
                        .HasDefaultValueSql("'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTaotZTcu1CLMGOJMDl-f_LYBECs7tqwhgpXA&s'::character varying");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_index");

                    b.HasIndex(new[] { "Phone" }, "users_phone_index");

                    b.HasIndex(new[] { "Status" }, "users_status_index");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionItem", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Project", "IdprojectNavigation")
                        .WithMany("ConstructionItems")
                        .HasForeignKey("Idproject")
                        .IsRequired()
                        .HasConstraintName("construction_item_idproject_fkey");

                    b.Navigation("IdprojectNavigation");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionTask", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.ConstructionItem", "IdconstructionitemNavigation")
                        .WithMany("ConstructionTasks")
                        .HasForeignKey("Idconstructionitem")
                        .IsRequired()
                        .HasConstraintName("construction_task_idconstructionitem_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.Staff", "IdstaffNavigation")
                        .WithMany("ConstructionTasks")
                        .HasForeignKey("Idstaff")
                        .HasConstraintName("construction_task_idstaff_fkey");

                    b.Navigation("IdconstructionitemNavigation");

                    b.Navigation("IdstaffNavigation");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionTemplateItem", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.ConstructionTemplateItem", "IdparentNavigation")
                        .WithMany("InverseIdparentNavigation")
                        .HasForeignKey("Idparent")
                        .HasConstraintName("construction_template_item_idparent_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.ConstructionTemplate", "IdtemplateNavigation")
                        .WithMany("ConstructionTemplateItems")
                        .HasForeignKey("Idtemplate")
                        .IsRequired()
                        .HasConstraintName("construction_template_item_idtemplate_fkey");

                    b.Navigation("IdparentNavigation");

                    b.Navigation("IdtemplateNavigation");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionTemplateTask", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.ConstructionTemplateItem", "IdtemplateitemNavigation")
                        .WithMany("ConstructionTemplateTasks")
                        .HasForeignKey("Idtemplateitem")
                        .IsRequired()
                        .HasConstraintName("construction_template_task_idtemplateitem_fkey");

                    b.Navigation("IdtemplateitemNavigation");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Contract", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Project", "Project")
                        .WithMany("Contracts")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("contract_project_id_fkey");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Customer", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("customer_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Design", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Project", "Project")
                        .WithMany("Designs")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("design_project_id_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.Staff", "Staff")
                        .WithMany("Designs")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("design_staff_id_fkey");

                    b.Navigation("Project");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.DesignImage", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Design", "Design")
                        .WithMany("DesignImages")
                        .HasForeignKey("DesignId")
                        .IsRequired()
                        .HasConstraintName("design_image_design_id_fkey");

                    b.Navigation("Design");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Doc", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Project", "Project")
                        .WithMany("Docs")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("docs_project_id_fkey");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.MaintenancePackageItem", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.MaintenanceItem", "MaintenanceItem")
                        .WithMany("MaintenancePackageItems")
                        .HasForeignKey("MaintenanceItemId")
                        .IsRequired()
                        .HasConstraintName("maintenance_package_item_maintenance_item_id_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.MaintenancePackage", "MaintenancePackage")
                        .WithMany("MaintenancePackageItems")
                        .HasForeignKey("MaintenancePackageId")
                        .IsRequired()
                        .HasConstraintName("maintenance_package_item_maintenance_package_id_fkey");

                    b.Navigation("MaintenanceItem");

                    b.Navigation("MaintenancePackage");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.MaintenanceRequest", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Customer", "Customer")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("maintenance_request_customer_id_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.MaintenancePackage", "MaintenancePackage")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("MaintenancePackageId")
                        .IsRequired()
                        .HasConstraintName("maintenance_request_maintenance_package_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("MaintenancePackage");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.MaintenanceRequestTask", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.MaintenanceRequest", "MaintenanceRequest")
                        .WithMany("MaintenanceRequestTasks")
                        .HasForeignKey("MaintenanceRequestId")
                        .IsRequired()
                        .HasConstraintName("maintenance_request_task_maintenance_request_id_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.Staff", "Staff")
                        .WithMany("MaintenanceRequestTasks")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("maintenance_request_task_staff_id_fkey");

                    b.Navigation("MaintenanceRequest");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.PackageDetail", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Package", "Package")
                        .WithMany("PackageDetails")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("package_detail_package_id_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.PackageItem", "PackageItem")
                        .WithMany("PackageDetails")
                        .HasForeignKey("PackageItemId")
                        .IsRequired()
                        .HasConstraintName("package_detail_package_item_id_fkey");

                    b.Navigation("Package");

                    b.Navigation("PackageItem");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.PaymentBatch", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Contract", "Contract")
                        .WithMany("PaymentBatches")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("payment_batch_contract_id_fkey");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Project", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("project_customer_id_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.Package", "Package")
                        .WithMany("Projects")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("project_package_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ProjectStaff", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Project", "Project")
                        .WithMany("ProjectStaffs")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("project_staff_project_id_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.Staff", "Staff")
                        .WithMany("ProjectStaffs")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("project_staff_staff_id_fkey");

                    b.Navigation("Project");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Quotation", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.ConstructionTemplate", "IdtemplateNavigation")
                        .WithMany("Quotations")
                        .HasForeignKey("Idtemplate")
                        .IsRequired()
                        .HasConstraintName("quotation_idtemplate_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.Project", "Project")
                        .WithMany("Quotations")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("quotation_project_id_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.Promotion", "Promotion")
                        .WithMany("Quotations")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("quotation_promotion_id_fkey");

                    b.Navigation("IdtemplateNavigation");

                    b.Navigation("Project");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.QuotationDetail", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Quotation", "Quotation")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("QuotationId")
                        .IsRequired()
                        .HasConstraintName("quotation_detail_quotation_id_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.Service", "Service")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("quotation_detail_service_id_fkey");

                    b.Navigation("Quotation");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.QuotationEquipment", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Equipment", "Equipment")
                        .WithMany("QuotationEquipments")
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("quotation_equipment_equipment_id_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.Quotation", "Quotation")
                        .WithMany("QuotationEquipments")
                        .HasForeignKey("QuotationId")
                        .IsRequired()
                        .HasConstraintName("quotation_equipment_quotation_id_fkey");

                    b.Navigation("Equipment");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Staff", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.User", "User")
                        .WithMany("Staff")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("staff_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Transaction", b =>
                {
                    b.HasOne("KPCOS.DataAccessLayer.Entities.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("transaction_customer_id_fkey");

                    b.HasOne("KPCOS.DataAccessLayer.Entities.Doc", "IdDocsNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("IdDocs")
                        .HasConstraintName("transaction_id_docs_fkey");

                    b.Navigation("Customer");

                    b.Navigation("IdDocsNavigation");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionItem", b =>
                {
                    b.Navigation("ConstructionTasks");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionTemplate", b =>
                {
                    b.Navigation("ConstructionTemplateItems");

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.ConstructionTemplateItem", b =>
                {
                    b.Navigation("ConstructionTemplateTasks");

                    b.Navigation("InverseIdparentNavigation");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Contract", b =>
                {
                    b.Navigation("PaymentBatches");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Customer", b =>
                {
                    b.Navigation("MaintenanceRequests");

                    b.Navigation("Projects");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Design", b =>
                {
                    b.Navigation("DesignImages");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Doc", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Equipment", b =>
                {
                    b.Navigation("QuotationEquipments");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.MaintenanceItem", b =>
                {
                    b.Navigation("MaintenancePackageItems");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.MaintenancePackage", b =>
                {
                    b.Navigation("MaintenancePackageItems");

                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.MaintenanceRequest", b =>
                {
                    b.Navigation("MaintenanceRequestTasks");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Package", b =>
                {
                    b.Navigation("PackageDetails");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.PackageItem", b =>
                {
                    b.Navigation("PackageDetails");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Project", b =>
                {
                    b.Navigation("ConstructionItems");

                    b.Navigation("Contracts");

                    b.Navigation("Designs");

                    b.Navigation("Docs");

                    b.Navigation("ProjectStaffs");

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Promotion", b =>
                {
                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Quotation", b =>
                {
                    b.Navigation("QuotationDetails");

                    b.Navigation("QuotationEquipments");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Service", b =>
                {
                    b.Navigation("QuotationDetails");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.Staff", b =>
                {
                    b.Navigation("ConstructionTasks");

                    b.Navigation("Designs");

                    b.Navigation("MaintenanceRequestTasks");

                    b.Navigation("ProjectStaffs");
                });

            modelBuilder.Entity("KPCOS.DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
